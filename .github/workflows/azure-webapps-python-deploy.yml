# This workflow will build and push a Python application to an Azure Web App when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure App Service web app.
# For instructions see https://docs.microsoft.com/en-us/azure/app-service/quickstart-python?tabs=bash&pivots=python-framework-flask
#
# To configure this workflow:
#
# 1. Download the Publish Profile for your Azure Web App. You can download this file from the Overview page of your Web App in the Azure Portal.
#    For more information: https://docs.microsoft.com/en-us/azure/app-service/deploy-github-actions?tabs=applevel#generate-deployment-credentials
#
# 2. Create a secret in your repository named AZURE_WEBAPP_PUBLISH_PROFILE, paste the publish profile contents as the value of the secret.
#    For instructions on obtaining the publish profile see: https://docs.microsoft.com/azure/app-service/deploy-github-actions#configure-the-github-secret
#
# 3. Change the value for the AZURE_WEBAPP_NAME. Optionally, change the PYTHON_VERSION environment variables below.
#
# For more information on GitHub Actions for Azure: https://github.com/Azure/Actions
# For more information on the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples

name: Build and deploy Python app to Azure Web App

env:
  AZURE_WEBAPP_NAME: VideoStickerCreator # set this to the name of your Azure Web App
  PYTHON_VERSION: "3.11" # set this to the Python version to use
  WORKING_DIRECTORY: "./"
  VENV_NAME: "./antenv"

on:
  push:
    branches:
      - main

concurrency:
  group: deploy-azure
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python version
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          check-latest: true
          update-environment: true

      - name: Create and start virtual environment
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          # sudo apt install libpq-dev python3-wheel
          python -m venv ${{ env.VENV_NAME }} 
          source antenv/bin/activate
          #python -m venv ${{ env.VENV_NAME }}
          #source ${{ env.VENV_NAME }}/bin/activate

      - name: Install only the necessary packages
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          pip install -r requirements.txt
          # echo "Getting all the dependencies of the requirements..."
          # pip freeze -r requirements.txt > requirements-new.txt
          # echo "Calculating the difference..."
          # grep -v -x -f requirements-new.txt requirements.txt 
          # echo "Adding back the ones we want..."
          # cat requirements.txt >> requirements-new.txt
          # cat requirements-new.txt | grep -vE "$(cat unrequirements.txt)" > requirements-final.txt
          # cat requirements-final.txt | grep -vE "$(cat no-options-requirements.txt)" > requirements-final.txt
          # cat requirements-always-require.txt >> requirements-final.txt
          # #awk 'NF{print $0 " --install-option=\"--no-deps\" --install-option=\"--only-binary\""}' requirements-final.txt > requirements.txt
          # mv requirements-final.txt requirements.txt
          # echo "Installing these requirements:"
          # cat requirements.txt

      - name: Set up dependency caching for faster installs
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          pip install --prefer-binary -r requirements.txt
          pip install -r no-options-requirements.txt

      # Optional: Add a step to run tests here (PyTest, Django test suites, etc.)
      
      - name: Zip the contents of the compilef app directory
        uses: nguyenquyhy/zip-release@v0.3.0

      - name: Upload artifact for deployment jobs
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.AZURE_WEBAPP_NAME }}
          path: ./release.zip

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: "production"
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4.1.7
        with:
          name: ${{ env.AZURE_WEBAPP_NAME }}
          path: .

      #- name: Activate the venv
      #  run:
      #    # python -m venv ${{ env.VENV_NAME }}
      #    source ${{ env.VENV_NAME }}/bin/activate

      - name: "Deploy to Azure Web App"
        env:
          CUSTOM_REQUIREMENTSTXT_PATH: requirements.txt
          VIRTUALENV_NAME: ${{ env.VENV_NAME }}
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2.2.6
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: release.zip
